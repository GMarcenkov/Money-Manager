[{"/home/niksan/Desktop/Projects/budget-tracker/src/index.tsx":"1","/home/niksan/Desktop/Projects/budget-tracker/src/reportWebVitals.ts":"2","/home/niksan/Desktop/Projects/budget-tracker/src/App.tsx":"3","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/store.tsx":"4","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/routes.tsx":"5","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/helpers/AuthRoute.tsx":"6","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/loginPage/LoginPage.tsx":"7","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/WeeklyPage.tsx":"8","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/DailyPage.tsx":"9","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/homePage/HomePage.tsx":"10","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/YearlyPage.tsx":"11","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/WeeklyPage.tsx":"12","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/DailyPage.tsx":"13","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/MonthlyPage.tsx":"14","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/YearlyPage.tsx":"15","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/MonthlyPage.tsx":"16","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/index.tsx":"17","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/yearlyContainer/YearlyContainer.tsx":"18","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/weeklyContainer/WeeklyContainer.tsx":"19","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/weeklyContainer/WeeklyContainer.tsx":"20","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/yearlyContainer/YearlyContainer.tsx":"21","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/monthlyContainer/MonthlyContainer.tsx":"22","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/dailyContainer/DailyContainer.tsx":"23","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/userReducer.tsx":"24","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/LoginContainer.tsx":"25","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/navBar/NavBar.tsx":"26","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/dailyContainer/DailyContainer.tsx":"27","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/monthlyContainer/TransactionContainer.tsx":"28","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/transactionReducer.tsx":"29","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/yearlyContainer/YearlyTableRow.tsx":"30","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/weeklyContainer/WeeklyTableRow.tsx":"31","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/navBarMenu/NavBarMenu.tsx":"32","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/monthlyContainer/NewCalendar.tsx":"33","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/types.tsx":"34","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/LoginForm.tsx":"35","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/RegistrationForm.tsx":"36","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/actions/usersActions.tsx":"37","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/SocialNetworks.tsx":"38","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/infoRow/InfoRow.tsx":"39","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/sideBar/SideBar.tsx":"40","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/actions/transactionActions.tsx":"41","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/addTransactionModal/AddTransactionModal.tsx":"42","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/infoModal/InfoModal.tsx":"43","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/dailyContainer/components/dailyTableRow/DailyTableRow.tsx":"44","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/addTransactionModal/form/Form.tsx":"45"},{"size":630,"mtime":1610149069435,"results":"46","hashOfConfig":"47"},{"size":425,"mtime":1608110400809,"results":"48","hashOfConfig":"47"},{"size":188,"mtime":1608455000758,"results":"49","hashOfConfig":"47"},{"size":382,"mtime":1610149069435,"results":"50","hashOfConfig":"47"},{"size":2294,"mtime":1611075140339,"results":"51","hashOfConfig":"47"},{"size":538,"mtime":1611075140335,"results":"52","hashOfConfig":"47"},{"size":228,"mtime":1608455000758,"results":"53","hashOfConfig":"47"},{"size":304,"mtime":1609878797853,"results":"54","hashOfConfig":"47"},{"size":322,"mtime":1610149069435,"results":"55","hashOfConfig":"47"},{"size":200,"mtime":1609878818685,"results":"56","hashOfConfig":"47"},{"size":322,"mtime":1610291133375,"results":"57","hashOfConfig":"47"},{"size":321,"mtime":1610750690896,"results":"58","hashOfConfig":"47"},{"size":292,"mtime":1610750690896,"results":"59","hashOfConfig":"47"},{"size":473,"mtime":1610291133375,"results":"60","hashOfConfig":"47"},{"size":322,"mtime":1610750690896,"results":"61","hashOfConfig":"47"},{"size":329,"mtime":1610750690896,"results":"62","hashOfConfig":"47"},{"size":229,"mtime":1612636242879,"results":"63","hashOfConfig":"47"},{"size":3485,"mtime":1611075140339,"results":"64","hashOfConfig":"47"},{"size":4464,"mtime":1611075140339,"results":"65","hashOfConfig":"47"},{"size":885,"mtime":1610750690896,"results":"66","hashOfConfig":"47"},{"size":886,"mtime":1610750690896,"results":"67","hashOfConfig":"47"},{"size":2807,"mtime":1611075140335,"results":"68","hashOfConfig":"47"},{"size":883,"mtime":1610750690896,"results":"69","hashOfConfig":"47"},{"size":567,"mtime":1610900340752,"results":"70","hashOfConfig":"47"},{"size":4690,"mtime":1612636242875,"results":"71","hashOfConfig":"47"},{"size":1368,"mtime":1612636242875,"results":"72","hashOfConfig":"47"},{"size":11805,"mtime":1612636242879,"results":"73","hashOfConfig":"47"},{"size":20802,"mtime":1612636242879,"results":"74","hashOfConfig":"47"},{"size":800,"mtime":1612636242879,"results":"75","hashOfConfig":"47"},{"size":1121,"mtime":1611075140339,"results":"76","hashOfConfig":"47"},{"size":1018,"mtime":1611075140339,"results":"77","hashOfConfig":"47"},{"size":3350,"mtime":1610750690892,"results":"78","hashOfConfig":"47"},{"size":2780,"mtime":1611075140339,"results":"79","hashOfConfig":"47"},{"size":181,"mtime":1612636242879,"results":"80","hashOfConfig":"47"},{"size":1160,"mtime":1610846803210,"results":"81","hashOfConfig":"47"},{"size":1692,"mtime":1610846803210,"results":"82","hashOfConfig":"47"},{"size":387,"mtime":1611075140339,"results":"83","hashOfConfig":"47"},{"size":967,"mtime":1608455000758,"results":"84","hashOfConfig":"47"},{"size":942,"mtime":1611075140339,"results":"85","hashOfConfig":"47"},{"size":1143,"mtime":1610750690896,"results":"86","hashOfConfig":"47"},{"size":226,"mtime":1612636242879,"results":"87","hashOfConfig":"47"},{"size":4902,"mtime":1612636242875,"results":"88","hashOfConfig":"47"},{"size":4403,"mtime":1612636242879,"results":"89","hashOfConfig":"47"},{"size":1785,"mtime":1612636242879,"results":"90","hashOfConfig":"47"},{"size":6927,"mtime":1612636242879,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1eorvxk",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/niksan/Desktop/Projects/budget-tracker/src/index.tsx",[],["191","192"],"/home/niksan/Desktop/Projects/budget-tracker/src/reportWebVitals.ts",[],"/home/niksan/Desktop/Projects/budget-tracker/src/App.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/store.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/routes.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/helpers/AuthRoute.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/loginPage/LoginPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/WeeklyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/DailyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/homePage/HomePage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/YearlyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/WeeklyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/DailyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/transactionPage/MonthlyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/YearlyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/pages/statsPage/MonthlyPage.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/index.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/yearlyContainer/YearlyContainer.tsx",["193","194"],"import React from \"react\";\nimport Moment from \"moment\";\nimport NavBarMenu from \"../../../layout/navBarMenu/NavBarMenu\";\nimport YearlyStyle from \"./YearlyStyle.module.css\";\nimport InfoRow from \"../components/infoRow/InfoRow\";\nimport {useHistory} from 'react-router-dom'\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport YearlyTableRow from \"./YearlyTableRow\";\n\nexport interface State {\n  date: any;\n  months: { from: any; to: any; expense: number; income: number }[];\n  sumIncome: number;\n  sumExpense: number;\n}\n\nclass YearlyContainer extends React.Component {\n  state: State = {\n    date: new Date(),\n    months: [],\n    sumIncome: 0,\n    sumExpense: 0,\n  };\n\n  componentDidMount() {\n    this.setYear();\n  }\n  setYear = async () => {\n    let months = [];\n\n    const { date } = this.state;\n\n    if (date.getFullYear() === new Date().getFullYear()) {\n      for (let i = 0; i <= date.getMonth(); i++) {\n        await months.push({\n          from: moment(\n            new Date(date.getFullYear(), date.getMonth() + i, 2)\n          ).toISOString(),\n          to: moment(\n            new Date(date.getFullYear(), date.getMonth() + i + 1, 1)\n          ).toISOString(),\n          income: 0,\n          expense: 0,\n        });\n      }\n    }\n    if (date.getFullYear() < new Date().getFullYear()) {\n      for (let i = 0; i <= 11; i++) {\n        await months.push({\n          from: moment(\n            new Date(date.getFullYear(), date.getMonth() + i, 2)\n          ).toISOString(),\n          to: moment(\n            new Date(date.getFullYear(), date.getMonth() + i + 1, 1)\n          ).toISOString(),\n          income: 0,\n          expense: 0,\n        });\n      }\n    }\n    let config = {\n      headers: {\n        Authorization:\n          \"Bearer \" +\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n\n    axios\n      .post(\n        `http://localhost:5000/transaction/getYearlyOrWeekly`,\n        months,\n        config\n      )\n      .then((data) => {\n        this.setState({\n          months: data.data.months,\n          sumIncome: data.data.sumIncome,\n          sumExpense: data.data.sumExpense,\n        });\n      });\n  };\n  handleNextYear = async () => {\n    let Year = this.state.date.getFullYear();\n    let newYear = new Date().setFullYear(Year + 1);\n\n    await this.setState({\n      date: new Date(newYear),\n      months: [],\n    });\n\n    this.setYear();\n  };\n  handlePreviousYear = async () => {\n    let Year = this.state.date.getFullYear();\n    let newYear = new Date().setFullYear(Year - 1);\n\n    await this.setState({\n      ...this.state,\n      date: new Date(newYear),\n      months: [],\n    });\n\n    this.setYear();\n  };\n\n\n  render() {\n    const { date, months, sumExpense, sumIncome } = this.state;\n    return (\n      <div className={YearlyStyle.wrapper}>\n        <NavBarMenu\n          handlePreviousMonth={this.handlePreviousYear}\n          handleNextMonth={this.handleNextYear}\n          date={date}\n        />\n        <div className={YearlyStyle.container}>\n          <table className={YearlyStyle.table}>\n            <InfoRow sumIncome={sumIncome} sumExpense={sumExpense} />\n            <tbody >\n            {months.reverse().map((month, index) => (\n                <YearlyTableRow month={month} date={date}/>\n            ))}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default YearlyContainer;\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/weeklyContainer/WeeklyContainer.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/weeklyContainer/WeeklyContainer.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/yearlyContainer/YearlyContainer.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/monthlyContainer/MonthlyContainer.tsx",["195","196","197"],"import React, { useEffect, useState } from \"react\";\nimport NavBarMenu from \"../../../layout/navBarMenu/NavBarMenu\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\ntype Props = {\n  sumIncome: number;\n  sumExpense: number;\n  transactions: {\n    createdAt: any;\n    income: number;\n    expense: number;\n    events: {\n      type: string;\n      date: any;\n      account?: string;\n      from?: string;\n      to?: string;\n      category?: string;\n      amount: number;\n      note: string;\n      description: string;\n    }[];\n  }[];\n};\n\nconst MonthlyContainer = () => {\n  const [transactions, setTransactions] = useState<Props[\"transactions\"]>([]);\n  const [date, setDate] = useState(new Date());\n  const [sumIncome, setSumIncome] = useState(0);\n  const [sumExpense, setSumExpense] = useState(0);\n\n  useEffect(() => {\n    getTransactions(new Date());\n  }, []);\n\n  const handlePreviousMonth = () => {\n    let Month = new Date(date).getMonth();\n    let Year = date.getFullYear();\n    let newMonth = new Date(Year, Month - 1);\n    setDate(new Date(newMonth));\n    getTransactions(new Date(newMonth));\n  };\n  const handleNextMonth = () => {\n    let Month = new Date(date).getMonth();\n    let Year = date.getFullYear();\n    let newMonth = new Date(Year, Month + 1);\n    setDate(new Date(newMonth));\n    getTransactions(new Date(newMonth));\n  };\n  const getTransactions = (date: any) => {\n    let firstDay = moment(\n      new Date(date.getFullYear(), date.getMonth(), 1)\n    ).toISOString();\n    let lastDay = moment(\n      new Date(date.getFullYear(), date.getMonth() + 1, 0)\n    ).toISOString();\n    let config = {\n      headers: {\n        Authorization:\n          \"Bearer \" +\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n    axios\n      .get(\n        `http://localhost:5000/transaction/specificDatePeriod/${firstDay}/${lastDay}`,\n        config\n      )\n      .then((data) => {\n        setTransactions(data.data.transactions);\n        setSumExpense(data.data.sumExpense);\n        setSumIncome(data.data.sumIncome);\n      });\n  };\n\n  return (\n    <div>\n      <NavBarMenu\n        handlePreviousMonth={handlePreviousMonth}\n        handleNextMonth={handleNextMonth}\n        date={date}\n      />\n\n      <div style={{ width: \"400px\" }}>\n        <PieChart\n          animate={true}\n          label={({ dataEntry }) => dataEntry.title}\n          data={[\n            { title: \"1\", value: 10000, color: \"#E38627\", label: \"1\" },\n            { title: \"2\", value: 1544, color: \"#C13C37\" },\n            { title: \"3\", value: 204, color: \"#6A2135\" },\n          ]}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MonthlyContainer;\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/stats/dailyContainer/DailyContainer.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/userReducer.tsx",["198"],"import { SIGN_IN } from \"../types\";\n\nexport interface State {\n  user: {};\n  token: string;\n  loading: boolean;\n}\n\nconst initialState = {\n  user: {},\n  token: \"\",\n  loading: true,\n};\n\nexport default function (state = initialState, action: any) {\n  switch (action.type) {\n    case SIGN_IN:\n      if (action.payload.token) {\n        localStorage.setItem(\"jwt\", action.payload.token);\n      }\n\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/LoginContainer.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/navBar/NavBar.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/dailyContainer/DailyContainer.tsx",["199"],"import React, { useEffect, useState } from \"react\";\nimport NavBarMenu from \"../../../layout/navBarMenu/NavBarMenu\";\nimport DailyStyle from \"./DailyStyle.module.css\";\nimport InfoRow from \"../components/infoRow/InfoRow\";\nimport Moment from \"moment\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport DailyTableRow from \"./components/dailyTableRow/DailyTableRow\";\nimport {\n  handleNextMonth,\n  handlePreviousMonth,\n} from \"../../../store/actions/transactionActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AddTransactionModal from \"../components/addTransactionModal/AddTransactionModal\";\n\ntype Props = {\n  sumIncome: number;\n  sumExpense: number;\n  selectedEvent: {\n    _id?: string;\n    type: string;\n    date: any;\n    account?: string;\n    from?: string;\n    to?: string;\n    fees: string;\n    category?: string;\n    amount: string;\n    note: string;\n    description: string;\n  };\n  event: {\n    _id: string;\n    type: string;\n    date: any;\n    account?: string;\n    from?: string;\n    to?: string;\n    category?: string;\n    amount: number;\n    fees: number;\n    note: string;\n    description: string;\n  };\n  transactions: {\n    _id: string;\n    createdAt: any;\n    income: number;\n    expense: number;\n    events: Props[\"event\"][];\n  }[];\n};\nconst DailyContainer = () => {\n  const dispatch = useDispatch();\n  const [transactions, setTransactions] = useState<Props[\"transactions\"]>([]);\n  const [transactionIsOpen, setTransactionIsOpen] = useState(false);\n  const [sumIncome, setSumIncome] = useState(0);\n  const [sumExpense, setSumExpense] = useState(0);\n  const [transactionId, setTransactionId] = useState(\"\");\n  const [isEdit, setIsEdit] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<Props[\"selectedEvent\"]>({\n    type: \"income\",\n    date: new Date(),\n    account: \"\",\n    from: \"\",\n    category: \"\",\n    fees: \"0\",\n    to: \"\",\n    amount: \"0\",\n    note: \"\",\n    description: \"\",\n  });\n  const [errors, setErrors] = useState({\n    account: \"\",\n    from: \"\",\n    category: \"\",\n    to: \"\",\n    amount: \"\",\n  });\n\n  let config = {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n    },\n  };\n  const state = useSelector((state: any) => state.transaction);\n\n  useEffect(() => {\n    getTransactions(state.date);\n  }, [state.date]);\n\n  const getTransactions = (date: any) => {\n    let firstDay = moment(\n      new Date(date.getFullYear(), date.getMonth(), 1)\n    ).toISOString();\n    let lastDay = moment(\n      new Date(date.getFullYear(), date.getMonth() + 1, 0)\n    ).toISOString();\n    axios\n      .get(\n        `http://localhost:5000/transaction/specificDatePeriod/${firstDay}/${lastDay}`,\n        config\n      )\n      .then((data) => {\n        setTransactions(data.data.transactions);\n        setSumExpense(data.data.sumExpense);\n        setSumIncome(data.data.sumIncome);\n      });\n  };\n  const handleInput = (event: any) => {\n    if (event.target.name === \"type\") {\n      setSelectedEvent({\n        ...selectedEvent,\n        category: \"\",\n        [event.target.name]: event.target.value,\n      });\n    } else {\n      setSelectedEvent({\n        ...selectedEvent,\n        [event.target.name]: event.target.value,\n      });\n    }\n  };\n\n  const validateForm = (value: Props[\"selectedEvent\"]) => {\n    let errors = {\n      account: \"\",\n      from: \"\",\n      category: \"\",\n      to: \"\",\n      amount: \"\",\n      fees: \"\",\n    };\n\n    if (value.account === \"\" && !(value.type === \"transfer\")) {\n      errors.account = \"Please select a account\";\n    }\n    if (\n      value.type === \"transfer\" &&\n      (value.from === \"\" || value.from === undefined)\n    ) {\n      errors.from = \"Please select  from\";\n    }\n    if (value.category === \"\" && !(value.type === \"transfer\")) {\n      errors.category = \"Please select a category\";\n    }\n    if (\n      value.type === \"transfer\" &&\n      (value.to === \"\" || value.to === undefined)\n    ) {\n      errors.to = \"Please select  to\";\n    }\n    if (value.amount === \"\") {\n      errors.amount = \"Please select a amount\";\n    }\n\n    if (parseFloat(value.fees) > parseFloat(value.amount)) {\n      errors.fees = \"Fees can't be greater then amount\";\n    }\n    return errors;\n  };\n  const handleSave = () => {\n    const errors = validateForm(selectedEvent);\n    const isValid = Object.values(errors).filter(Boolean).length <= 0;\n\n    if (!isValid) {\n      setErrors(errors);\n      return;\n    } else {\n      setErrors({ account: \"\", from: \"\", category: \"\", to: \"\", amount: \"\" });\n    }\n\n    let incomeOrExpense = {\n      events: [\n        {\n          type: selectedEvent.type.toLowerCase(),\n          currency: \"BG\",\n          date: new Date(new Date(selectedEvent.date)).toISOString(),\n          account: selectedEvent.account,\n          category: selectedEvent.category,\n          amount: parseFloat(selectedEvent.amount) * 100,\n          note: selectedEvent.note,\n          description: selectedEvent.description,\n        },\n      ],\n      createdAt: new Date(\n        new Date(selectedEvent.date).setHours(0o0, 0o0, 0o0, 0o0)\n      ).toISOString(),\n    };\n    let transfer = {\n      events: [\n        {\n          type: selectedEvent.type.toLowerCase(),\n          currency: \"BG\",\n          date: new Date(new Date(selectedEvent.date)).toISOString(),\n          from: selectedEvent.from,\n          fees: parseFloat(selectedEvent.fees) * 100,\n          to: selectedEvent.to,\n          amount: parseFloat(selectedEvent.amount) * 100,\n          note: selectedEvent.note,\n          description: selectedEvent.description,\n        },\n      ],\n      createdAt: new Date(\n        new Date(selectedEvent.date).setHours(0o0, 0o0, 0o0, 0o0)\n      ).toISOString(),\n    };\n\n    if (isEdit) {\n      if (selectedEvent.type === \"transfer\") {\n        axios\n          .put(\n            `http://localhost:5000/transaction/event/edit/${transactionId}/${selectedEvent._id}`,\n            transfer.events[0],\n            config\n          )\n          .then(() => {\n            getTransactions(state.date);\n            handleClearState();\n          });\n      } else {\n        axios\n          .put(\n            `http://localhost:5000/transaction/event/edit/${transactionId}/${selectedEvent._id}`,\n            incomeOrExpense.events[0],\n            config\n          )\n          .then(() => {\n            getTransactions(new Date());\n            handleClearState();\n          });\n      }\n    } else {\n      if (selectedEvent.type === \"transfer\") {\n        axios\n          .post(`http://localhost:5000/transaction/create`, transfer, config)\n          .then(() => {\n            getTransactions(state.date);\n            handleClearState();\n          });\n      } else {\n        axios\n          .post(\n            `http://localhost:5000/transaction/create`,\n            incomeOrExpense,\n            config\n          )\n          .then(() => {\n            getTransactions(state.date);\n            handleClearState();\n          });\n      }\n    }\n  };\n  const handleDelete = () => {\n    let data = {};\n    axios\n      .put(\n        `http://localhost:5000/transaction/event/delete/${transactionId}/${selectedEvent._id}`,\n        data,\n        config\n      )\n      .then(() => {\n        getTransactions(new Date());\n        handleClearState();\n      });\n  };\n  const handleClearState = () => {\n    setErrors({ account: \"\", from: \"\", category: \"\", to: \"\", amount: \"\" });\n    setTransactionIsOpen(false);\n    setIsEdit(false);\n    setTransactionId(\"\");\n    setSelectedEvent({\n      type: \"income\",\n      date: new Date(),\n      account: \"\",\n      from: \"\",\n      category: \"\",\n      fees: \"0\",\n      to: \"\",\n      amount: \"0\",\n      note: \"\",\n      description: \"\",\n    });\n  };\n  const handleSelectEvent = (event: Props[\"event\"], transactionId: string) => {\n    if (transactionIsOpen) {\n      handleClearState();\n    } else {\n      setTransactionIsOpen(true);\n      setTransactionId(transactionId);\n      setIsEdit(true);\n      let Event = {\n        ...event,\n        amount: (event.amount / 100).toFixed(2),\n        fees: (event.fees / 100).toFixed(2),\n      };\n      setSelectedEvent(Event);\n    }\n  };\n  const handleOpenTransaction = () => {\n    if (transactionIsOpen) {\n      setTransactionIsOpen(false);\n      setIsEdit(false);\n      setErrors({ account: \"\", from: \"\", category: \"\", to: \"\", amount: \"\" });\n      setSelectedEvent({\n        type: \"income\",\n        date: new Date(),\n        account: \"\",\n        from: \"\",\n        category: \"\",\n        fees: \"0\",\n        to: \"\",\n        amount: \"0\",\n        note: \"\",\n        description: \"\",\n      });\n    } else {\n      setTransactionIsOpen(true);\n    }\n  };\n  return (\n    <div className={DailyStyle.wrapper}>\n      <NavBarMenu\n        handlePreviousMonth={() => dispatch(handlePreviousMonth())}\n        handleNextMonth={() => dispatch(handleNextMonth())}\n        date={state.date}\n      />\n      <div className={DailyStyle.container}>\n        <table className={DailyStyle.table}>\n          <InfoRow sumIncome={sumIncome} sumExpense={sumExpense} />\n\n          {transactions\n            .sort(function (a, b) {\n              return (\n                new Date(a.createdAt).getDate() -\n                new Date(b.createdAt).getDate()\n              );\n            })\n            .reverse()\n            .map((transaction) => (\n              <tbody className={DailyStyle.table_container}>\n                <tr>\n                  <th>\n                    <div className={DailyStyle.date_content}>\n                      <div className={DailyStyle.date}>\n                        {Moment(transaction.createdAt).format(\"DD\")}\n                      </div>\n                      <div>\n                        <div className={DailyStyle.date_year}>\n                          {Moment(transaction.createdAt).format(\"MM.YYYY\")}\n                        </div>\n                        <div\n                          className={\n                            transaction.createdAt === new Date()\n                              ? DailyStyle.date_day\n                              : DailyStyle.date_day_select\n                          }\n                        >\n                          {Moment(transaction.createdAt).format(\"ddd\")}\n                        </div>\n                      </div>\n                    </div>\n                  </th>\n                  <th>\n                    <div className={DailyStyle.income}>\n                      {(transaction.income / 100).toFixed(2)}\n                    </div>\n                  </th>\n                  <th>\n                    <div className={DailyStyle.expense}>\n                      {(transaction.expense / 100).toFixed(2)}\n                    </div>\n                  </th>\n                </tr>\n                {transaction.events.map((event) => (\n                  <DailyTableRow\n                    event={event}\n                    key={event._id}\n                    handleSelectEvent={(event) =>\n                      handleSelectEvent(event, transaction._id)\n                    }\n                  />\n                ))}\n              </tbody>\n            ))}\n        </table>\n        <FontAwesomeIcon\n          className={DailyStyle.add_button}\n          icon={faPlusCircle}\n          onClick={() => handleOpenTransaction()}\n        />\n      </div>\n      <AddTransactionModal\n        isAddTransactionOpen={transactionIsOpen}\n        transaction={selectedEvent}\n        errors={errors}\n        isEditTransactionOpen={isEdit}\n        handleInputChange={handleInput}\n        handleSave={handleSave}\n        handleOpenTransaction={handleOpenTransaction}\n        handleOpenEdit={handleOpenTransaction}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default DailyContainer;\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/monthlyContainer/TransactionContainer.tsx",["200","201","202","203","204","205"],"import React from \"react\";\nimport TransactionStyl from \"./TransactionStyle.module.css\";\nimport AddTransactionModal from \"../components/addTransactionModal/AddTransactionModal\";\nimport NavBarMenu from \"../../../layout/navBarMenu/NavBarMenu\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport InfoModal from \"../components/infoModal/InfoModal\";\nimport NewCalendar from \"./NewCalendar\";\n\ntype Props = {\n  filters: any;\n};\nexport interface State {\n  isAddTransactionOpen: boolean;\n  isInfoTransactionOpen: boolean;\n  isEditTransactionOpen: boolean;\n  transaction: {\n    _id?: string;\n    type: string;\n    date: any;\n    account?: string;\n    from?: string;\n    to?: string;\n    fees: string;\n    category?: string;\n    amount: string;\n    note: string;\n    description: string;\n    transferId?: string;\n  };\n  selectedDay: {\n    _id?: string;\n    createdAt?: any;\n    events: State[\"transaction\"][];\n    income?: number;\n    expense?: number;\n  };\n  isTransfer: boolean;\n  errors: {\n    account?: string;\n    from?: string;\n    to?: string;\n    category?: string;\n    amount: string;\n    fees?: string;\n  };\n  date: any;\n  transactions: {\n    _id: string;\n    createdAt: any;\n    events: State[\"transaction\"][];\n    income: number;\n    expense: number;\n  }[];\n  calendarDates: {\n    date: any;\n  }[];\n}\nclass TransactionContainer extends React.Component<Props> {\n  state: State = {\n    isInfoTransactionOpen: false,\n    isAddTransactionOpen: false,\n    isEditTransactionOpen: false,\n    date: new Date(),\n    isTransfer: false,\n    transaction: {\n      type: \"income\",\n      date: \"\",\n      account: \"\",\n      from: \"\",\n      category: \"\",\n      fees: \"0\",\n      transferId: \"\",\n      to: \"\",\n      amount: \"0\",\n      note: \"\",\n      description: \"\",\n    },\n    selectedDay: {\n      events: [],\n    },\n    errors: {\n      account: \"\",\n      from: \"\",\n      category: \"\",\n      to: \"\",\n      amount: \"\",\n    },\n    transactions: [],\n    calendarDates: [],\n  };\n\n  componentDidMount() {\n    if (this.props.filters.date) {\n      this.setState({\n        date: new Date(this.props.filters.date),\n      });\n      this.getTransactions(new Date(this.props.filters.date));\n      this.setCalendar(new Date(this.props.filters.date));\n    } else {\n      this.setState({\n        date: new Date(),\n      });\n      this.getTransactions(new Date());\n    }\n    if (this.props.filters.date === undefined) {\n      this.setCalendar(new Date());\n    }\n  }\n\n  getTransactions = (date: any) => {\n    let firstDay = moment(date).startOf(\"month\").startOf(\"week\").get(\"date\");\n    let firstMonth = moment(date).startOf(\"month\").startOf(\"week\").get(\"month\");\n    let firstYear = moment(date).startOf(\"month\").startOf(\"week\").get(\"year\");\n    let lastDay = moment(date).endOf(\"month\").endOf(\"week\").get(\"date\");\n    let lastMonth = moment(date).endOf(\"month\").endOf(\"week\").get(\"month\");\n    let lastYear = moment(date).endOf(\"month\").endOf(\"week\").get(\"year\");\n\n    let from = moment(new Date(firstYear, firstMonth, firstDay));\n    let to = moment(new Date(lastYear, lastMonth, lastDay));\n\n    let config = {\n      headers: {\n        Authorization:\n          \"Bearer \" +\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n    axios\n      .get(\n        `http://localhost:5000/transaction/specificDatePeriod/${from}/${to}`,\n        config\n      )\n      .then((data) => {\n        data.data.transactions.map((transaction: any) => {\n          if (\n            new Date(this.state.selectedDay.createdAt).getDate() ===\n              new Date(transaction.createdAt).getDate() &&\n            new Date(this.state.selectedDay.createdAt).getMonth() ===\n              new Date(transaction.createdAt).getMonth()\n          ) {\n            this.setState({\n              selectedDay: transaction,\n            });\n          }\n        });\n        this.setState({ transactions: data.data.transactions });\n      });\n  };\n  validateForm = (value: State[\"transaction\"]) => {\n    let errors = {\n      account: \"\",\n      from: \"\",\n      category: \"\",\n      to: \"\",\n      amount: \"\",\n      fees: \"\",\n    };\n\n    if (value.account === \"\" && !(value.type === \"transfer\")) {\n      errors.account = \"Please select a account\";\n    }\n    if (\n      value.type === \"transfer\" &&\n      (value.from === \"\" || value.from === undefined)\n    ) {\n      errors.from = \"Please select  from\";\n    }\n    if (value.category === \"\" && !(value.type === \"transfer\")) {\n      errors.category = \"Please select a category\";\n    }\n    if (\n      value.type === \"transfer\" &&\n      (value.to === \"\" || value.to === undefined)\n    ) {\n      errors.to = \"Please select  to\";\n    }\n    if (value.amount === \"\") {\n      errors.amount = \"Please select a amount\";\n    }\n\n    if (parseFloat(value.fees) > parseFloat(value.amount)) {\n      errors.fees = \"Fees can't be greater then amount\";\n    }\n    return errors;\n  };\n  handleDeleteIn = () => {\n    let config = {\n      headers: {\n        Authorization:\n            \"Bearer \" +\n            \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n    let data = {};\n    axios\n        .put(\n            `http://localhost:5000/transaction/event/delete/${this.state.selectedDay._id}/${this.state.transaction._id}`,\n            data,\n            config\n        )\n        .then(() => {\n          let newEvents= this.state.selectedDay.events.filter(event=>event._id!==this.state.transaction._id)\n          this.setState({selectedDay:{...this.state.selectedDay,events:newEvents}})\n          this.getTransactions(this.state.date);\n        });\n  };\n  handleDelete = (transactionId: any, eventId: any) => {\n    let config = {\n      headers: {\n        Authorization:\n          \"Bearer \" +\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n    let data = {};\n    axios\n      .put(\n        `http://localhost:5000/transaction/event/delete/${transactionId}/${eventId}`,\n        data,\n        config\n      )\n      .then(() => {\n        let newEvents = this.state.selectedDay.events.filter(\n          (event) => event._id !== eventId\n        );\n        this.setState({\n          selectedDay: { ...this.state.selectedDay, events: newEvents },\n        });\n        this.getTransactions(this.state.date);\n      });\n  };\n  handleOpenEdit = (event: any) => {\n    const { isEditTransactionOpen } = this.state;\n\n    isEditTransactionOpen\n      ? this.setState({ isEditTransactionOpen: false })\n      : this.setState({\n          isEditTransactionOpen: true,\n          transaction: {\n            ...event,\n            amount: (event.amount / 100).toFixed(2),\n            fees: (event.fees / 100).toFixed(2),\n          },\n        });\n  };\n  handleNextMonth = async () => {\n    const { date } = this.state;\n    let Month = new Date(date).getMonth();\n    let Year = date.getFullYear();\n    let newMonth = new Date(Year, Month + 1);\n    await this.setState({\n      date: new Date(newMonth),\n      calendarDates: [],\n    });\n    this.getTransactions(new Date(newMonth));\n    this.setCalendar(new Date(newMonth));\n  };\n  handlePreviousMonth = async () => {\n    const { date } = this.state;\n    let Month = new Date(date).getMonth();\n    let Year = date.getFullYear();\n    let newMonth = new Date(Year, Month - 1);\n    await this.setState({\n      date: new Date(newMonth),\n      calendarDates: [],\n    });\n    this.getTransactions(new Date(newMonth));\n    this.setCalendar(new Date(newMonth));\n  };\n  handleNextDay = async () => {\n    const { selectedDay, transactions } = this.state;\n\n    let date = new Date(selectedDay.createdAt);\n\n    let newDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate() + 1\n    );\n\n    await this.setState({\n      selectedDay: { createdAt: newDate, events: [] },\n      date: newDate,\n    });\n\n    await transactions.map((transaction) => {\n      if (\n        newDate.getDate() === new Date(transaction.createdAt).getDate() &&\n        newDate.getMonth() === new Date(transaction.createdAt).getMonth()\n      ) {\n        this.setState({\n          selectedDay: transaction,\n        });\n      }\n    });\n  };\n  handlePreviousDay = async () => {\n    const { selectedDay, transactions } = this.state;\n\n    let date = new Date(selectedDay.createdAt);\n\n    let newDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate() - 1\n    );\n    this.setState({\n      selectedDay: { createdAt: newDate, events: [] },\n      date: newDate,\n    });\n\n    await transactions.map((transaction) => {\n      if (\n        newDate.getDate() === new Date(transaction.createdAt).getDate() &&\n        newDate.getMonth() === new Date(transaction.createdAt).getMonth()\n      ) {\n        this.setState({\n          selectedDay: transaction,\n        });\n      }\n    });\n  };\n  handleOpenTransaction = () => {\n    if (this.state.isAddTransactionOpen) {\n      this.setState({\n        isAddTransactionOpen: false,\n        transaction: {\n          type: \"income\",\n          date: \"\",\n          account: \"\",\n          from: \"\",\n          category: \"\",\n          fees: \"\",\n          to: \"\",\n          amount: \"0\",\n          note: \"\",\n          description: \"\",\n        },\n      });\n    } else {\n      this.setState({\n        isAddTransactionOpen: true,\n        transaction: {\n          ...this.state.transaction,\n          date: this.state.selectedDay.createdAt,\n        },\n      });\n    }\n  };\n  handleOpenInfoModal = (date: any) => {\n    const { isInfoTransactionOpen, transactions, transaction } = this.state;\n    if (isInfoTransactionOpen) {\n      this.setState({\n        isInfoTransactionOpen: false,\n        selectedDay: { events: [] },\n      });\n    } else {\n      this.setState({\n        isInfoTransactionOpen: true,\n        selectedDay: { createdAt: new Date(date), events: [] },\n      });\n\n      transactions.map((transaction) => {\n        if (\n          new Date(date).getDate() ===\n            new Date(transaction.createdAt).getDate() &&\n          new Date(date).getMonth() ===\n            new Date(transaction.createdAt).getMonth()\n        ) {\n          this.setState({\n            selectedDay: transaction,\n          });\n        }\n      });\n    }\n  };\n  handleInputChange = (event: any) => {\n    this.setState({\n      ...this.state,\n      transaction: {\n        ...this.state.transaction,\n        [event.target.name]: event.target.value,\n      },\n    });\n  };\n\n  handleSave = () => {\n    const { transaction, isEditTransactionOpen, selectedDay } = this.state;\n    const errors = this.validateForm(transaction);\n    const isValid = Object.values(errors).filter(Boolean).length <= 0;\n\n    if (!isValid) {\n      this.setState({ errors: errors });\n      return;\n    } else {\n      this.setState({\n        ...this.state,\n        errors: {},\n        isAddTransactionOpen: false,\n        isEditTransactionOpen: false,\n      });\n    }\n\n    let config = {\n      headers: {\n        Authorization:\n          \"Bearer \" +\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZjRjZjcyMDIwNTM5MmM3MGU5MmJlZiIsImlhdCI6MTYxMDIyNzAwOH0.bL8WKWjEe1NP2-07udR7ORGkraoavQZEyjtOUd9-5Po\",\n      },\n    };\n\n    let incomeOrExpense = {\n      events: [\n        {\n          type: transaction.type.toLowerCase(),\n          currency: \"BG\",\n          transferId: transaction.transferId,\n          date: new Date(\n            new Date(transaction.date).setHours(16, 33, 22)\n          ).toISOString(),\n          account: transaction.account,\n          category: transaction.category,\n          amount: parseFloat(transaction.amount) * 100,\n          note: transaction.note,\n          description: transaction.description,\n        },\n      ],\n      createdAt: new Date(\n        new Date(transaction.date).setHours(0o0, 0o0, 0o0)\n      ).toISOString(),\n    };\n    let transfer = {\n      events: [\n        {\n          type: transaction.type.toLowerCase(),\n          currency: \"BG\",\n          transferId: transaction.transferId,\n          date: new Date(\n            new Date(transaction.date).setHours(13, 21, 30)\n          ).toISOString(),\n          from: transaction.from,\n          fees: parseFloat(transaction.fees) * 100,\n          to: transaction.to,\n          amount: parseFloat(transaction.amount) * 100,\n          note: transaction.note,\n          description: transaction.description,\n        },\n      ],\n      createdAt: new Date(\n        new Date(transaction.date).setHours(0o0, 0o0, 0o0)\n      ).toISOString(),\n    };\n\n    if (isEditTransactionOpen) {\n      if (transaction.type === \"transfer\") {\n        axios\n          .put(\n            `http://localhost:5000/transaction/event/edit/${selectedDay._id}/${transaction._id}`,\n            transfer.events[0],\n            config\n          )\n          .then(() => {\n            this.getTransactions(this.state.date);\n            this.setState({\n              transaction: {\n                type: \"income\",\n                date: \"\",\n                account: \"\",\n                from: \"\",\n                fees: \"0\",\n                category: \"\",\n                to: \"\",\n                amount: \"0\",\n                note: \"\",\n                description: \"\",\n              },\n            });\n          });\n      } else {\n        axios\n          .put(\n            `http://localhost:5000/transaction/event/edit/${selectedDay._id}/${transaction._id}`,\n            incomeOrExpense.events[0],\n            config\n          )\n          .then(() => {\n            this.getTransactions(this.state.date);\n            this.setState({\n              selectedDay: { createdAt: transaction.date, events: [] },\n              transaction: {\n                type: \"income\",\n                date: \"\",\n                account: \"\",\n                from: \"\",\n                category: \"\",\n                fees: \"0\",\n                to: \"\",\n                amount: \"0\",\n                note: \"\",\n                description: \"\",\n              },\n            });\n          });\n      }\n    } else {\n      if (transaction.type === \"transfer\") {\n        axios\n          .post(`http://localhost:5000/transaction/create`, transfer, config)\n          .then(() => {\n            this.getTransactions(this.state.date);\n            this.setState({\n              transaction: {\n                type: \"income\",\n                date: \"\",\n                account: \"\",\n                from: \"\",\n                fees: \"0\",\n                category: \"\",\n                to: \"\",\n                amount: \"0\",\n                note: \"\",\n                description: \"\",\n              },\n            });\n          });\n      } else {\n        axios\n          .post(\n            `http://localhost:5000/transaction/create`,\n            incomeOrExpense,\n            config\n          )\n          .then(() => {\n            this.getTransactions(this.state.date);\n            this.setState({\n              selectedDay: { createdAt: transaction.date, events: [] },\n              transaction: {\n                type: \"income\",\n                date: \"\",\n                account: \"\",\n                from: \"\",\n                category: \"\",\n                fees: \"0\",\n                to: \"\",\n                amount: \"0\",\n                note: \"\",\n                description: \"\",\n              },\n            });\n          });\n      }\n    }\n  };\n\n  setCalendar = (date: any) => {\n    const { calendarDates } = this.state;\n    let firstDay = moment(date).startOf(\"month\").get(\"date\");\n    let firstMonth = moment(date).startOf(\"month\").get(\"month\");\n    let firstYear = moment(date).startOf(\"month\").get(\"year\");\n\n    let fromDate = new Date(firstYear, firstMonth, firstDay);\n\n    let lastDay = moment(date).endOf(\"month\").get(\"date\");\n    let lastMonth = moment(date).endOf(\"month\").get(\"month\");\n    let lastYear = moment(date).endOf(\"month\").get(\"year\");\n\n    let toDate = new Date(lastYear, lastMonth, lastDay);\n\n    if (fromDate.getDay() !== 1 && fromDate.getDay() !== 0) {\n      this.setFirstWeek(date);\n    }\n\n    if (fromDate.getDay() === 0) {\n      let lastDay = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n      for (let i = lastDay - 5; i <= lastDay; i++) {\n        this.state.calendarDates.push({\n          date: new Date(date.getFullYear(), date.getMonth() - 1, i),\n        });\n      }\n    }\n\n    for (let i = 1; i <= toDate.getDate(); i++) {\n      calendarDates.push({\n        date: new Date(date.getFullYear(), date.getMonth(), i),\n      });\n    }\n    if (toDate.getDay() !== 0) this.setLastWeek(date);\n  };\n  setFirstWeek = (date: any) => {\n    let firstDay = moment(date).startOf(\"month\").startOf(\"week\").get(\"date\");\n    let firstMonth = moment(date).startOf(\"month\").startOf(\"week\").get(\"month\");\n    let firstYear = moment(date).startOf(\"month\").startOf(\"week\").get(\"year\");\n\n    let fromDate = new Date(firstYear, firstMonth, firstDay + 1);\n\n    let lastDay = moment(fromDate).endOf(\"month\").get(\"date\");\n    let lastMonth = moment(fromDate).endOf(\"month\").get(\"month\");\n    let lastYear = moment(fromDate).endOf(\"month\").get(\"year\");\n\n    let toDate = new Date(lastYear, lastMonth, lastDay);\n    for (let i = fromDate.getDate(); i <= toDate.getDate(); i++) {\n      this.state.calendarDates.push({\n        date: new Date(fromDate.getFullYear(), fromDate.getMonth(), i),\n      });\n    }\n  };\n  setLastWeek = (date: any) => {\n    let lastDay = moment(date).endOf(\"month\").endOf(\"week\").get(\"date\");\n    let lastMonth = moment(date).endOf(\"month\").endOf(\"week\").get(\"month\");\n    let lastYear = moment(date).endOf(\"month\").endOf(\"week\").get(\"year\");\n\n    let toDate = new Date(lastYear, lastMonth, lastDay + 1);\n\n    for (let i = 1; i <= toDate.getDate(); i++) {\n      this.state.calendarDates.push({\n        date: new Date(toDate.getFullYear(), toDate.getMonth(), i),\n      });\n    }\n  };\n\n  render() {\n    const {\n      date,\n      errors,\n      isTransfer,\n      selectedDay,\n      transaction,\n      transactions,\n      calendarDates,\n      isAddTransactionOpen,\n      isEditTransactionOpen,\n      isInfoTransactionOpen,\n    } = this.state;\n    return (\n      <div className={TransactionStyl.wrapper}>\n        <NavBarMenu\n          date={date}\n          handleNextMonth={this.handleNextMonth}\n          handlePreviousMonth={this.handlePreviousMonth}\n        />\n        <NewCalendar\n          handleOpenInfoModal={this.handleOpenInfoModal}\n          transactions={transactions}\n          calendarDate={calendarDates}\n          date={date}\n        />\n        <InfoModal\n          handleDelete={this.handleDelete}\n          selectedDay={selectedDay}\n          handleNextDay={this.handleNextDay}\n          isInfoTransactionOpen={isInfoTransactionOpen}\n          handlePreviousDay={this.handlePreviousDay}\n          handleOpenInfoModal={this.handleOpenInfoModal}\n          handleOpenTransaction={this.handleOpenTransaction}\n          handleOpenEdit={this.handleOpenEdit}\n        />\n        <AddTransactionModal\n          isEditTransactionOpen={isEditTransactionOpen}\n          errors={errors}\n          transaction={transaction}\n          handleSave={this.handleSave}\n          handleOpenEdit={this.handleOpenEdit}\n          handleInputChange={this.handleInputChange}\n          isAddTransactionOpen={isAddTransactionOpen}\n          handleOpenTransaction={this.handleOpenTransaction}\n          handleDelete={this.handleDeleteIn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TransactionContainer;\n\n/*<Calendar*/\n\n/*  activeStartDate={this.state.date}*/\n\n/*  // onChange={(date) => console.log(date)}*/\n\n/*  calendarType={\"US\"}*/\n\n/*  className={TransactionStyl.calendar}*/\n\n/*  onClickDay={(date) => this.handleOpenInfoModal(date)}*/\n\n/*  showNavigation={false}*/\n\n/*  tileContent={({ date, view }) => this.handleSetEvent(date, view)}*/\n\n/*/>*/\n\n// handleSetEvent = (date: any, view: any) => {\n//   return (\n//     <div>\n//       {this.state.events.map((event) => (\n//         <div onClick={() => this.handleGetSpecificDay(event)}>\n//           {view === \"month\" &&\n//           date.getDate() === new Date(event.createdAt).getDate() &&\n//           date.getMonth() === new Date(event.createdAt).getMonth() &&\n//           date.getFullYear() === new Date(event.createdAt).getFullYear() ? (\n//             <div className={TransactionStyl.content_day}>\n//               <div className={TransactionStyl.income}>\n//                 ${(event.income / 100).toFixed(2)}\n//               </div>\n//               <div className={TransactionStyl.expense}>\n//                 ${(event.expense / 100).toFixed(2)}\n//               </div>\n//             </div>\n//           ) : null}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/reducers/transactionReducer.tsx",["206"],"import {\n  HANDLE_PREVIOUS_MONTH,\n  HANDLE_NEXT_MONTH,\n} from \"../types\";\n\nexport interface State {\n  date: any;\n}\n\nconst initialState = {\n  date: new Date(),\n};\nexport default function  (state = initialState, action: any){\n   switch (action.type) {\n    case HANDLE_NEXT_MONTH:\n      let nextMonth = new Date(state.date).getMonth();\n      let nextYear = state.date.getFullYear();\n      let nextNewMonth = new Date(nextYear, nextMonth + 1);\n      return {\n        ...state,\n        date: nextNewMonth,\n      };\n    case HANDLE_PREVIOUS_MONTH:\n      let Month = new Date(state.date).getMonth();\n      let Year = state.date.getFullYear();\n      let previousMonth = new Date(Year, Month - 1);\n      return {\n        ...state,\n        date: previousMonth,\n      };\n\n    default:\n      return state;\n  }\n}\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/yearlyContainer/YearlyTableRow.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/weeklyContainer/WeeklyTableRow.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/navBarMenu/NavBarMenu.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/monthlyContainer/NewCalendar.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/types.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/LoginForm.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/RegistrationForm.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/actions/usersActions.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/login/components/SocialNetworks.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/infoRow/InfoRow.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/layout/sideBar/SideBar.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/store/actions/transactionActions.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/addTransactionModal/AddTransactionModal.tsx",["207"],"import React from \"react\";\nimport AddTransactionStyl from \"./AddTransactionStyle.module.css\";\nimport { State } from \"../../monthlyContainer/TransactionContainer\";\nimport { Tabs, TabList, TabPanel, Tab } from \"react-tabs\";\nimport Form from \"./form/Form\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimesCircle, faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\ntype Props = {\n  isAddTransactionOpen: boolean;\n  transaction: State[\"transaction\"];\n  errors: State[\"errors\"];\n  isEditTransactionOpen: boolean;\n  handleInputChange: (event: {\n    target: {\n      value: string;\n      name: string;\n    };\n  }) => void;\n  handleSave: () => void;\n  handleOpenTransaction: (date: any) => void;\n  handleOpenEdit: (date: any) => void;\n  handleDelete: () => void;\n};\n\nconst AddTransactionModal: React.FC<Props> = ({\n  isAddTransactionOpen,\n  transaction,\n  handleInputChange,\n  errors,\n  handleSave,\n  handleOpenTransaction,\n  isEditTransactionOpen,\n  handleOpenEdit,\n  handleDelete,\n}) => {\n  const ChooseCategory = (event: string) => {\n    switch (event) {\n      case \"income\":\n        return 0;\n      case \"expense\":\n        return 1;\n      case \"transfer\":\n        return 2;\n    }\n  };\n  return (\n    <div>\n      {isAddTransactionOpen || isEditTransactionOpen ? (\n        <div className={AddTransactionStyl.modal_wrapper}>\n          <div className={AddTransactionStyl.container}>\n            <FontAwesomeIcon\n              className={AddTransactionStyl.close_button}\n              onClick={() =>\n                isEditTransactionOpen\n                  ? handleOpenEdit(\"\")\n                  : handleOpenTransaction(\"\")\n              }\n              icon={faTimesCircle}\n            />\n            <Tabs\n              selectedTabClassName={AddTransactionStyl.selected_tab}\n              selectedIndex={ChooseCategory(transaction.type)}\n            >\n              <TabList className={AddTransactionStyl.tab_list}>\n                <Tab\n                  className={AddTransactionStyl.tab}\n                  onClick={() => {\n                    handleInputChange({\n                      target: { value: \"income\", name: \"type\" },\n                    });\n                  }}\n                >\n                  <span>Income</span>\n                </Tab>\n                <Tab\n                  key=\"expense\"\n                  className={AddTransactionStyl.tab}\n                  onClick={() => {\n                    handleInputChange({\n                      target: { value: \"expense\", name: \"type\" },\n                    });\n                  }}\n                >\n                  <span>Expense</span>\n                </Tab>\n                <Tab\n                  className={AddTransactionStyl.tab}\n                  onClick={() =>\n                    handleInputChange({\n                      target: { value: \"transfer\", name: \"type\" },\n                    })\n                  }\n                >\n                  <span>Transfer</span>\n                </Tab>\n              </TabList>\n\n              <TabPanel>\n                <Form\n                  transaction={transaction}\n                  handleInputChange={handleInputChange}\n                  errors={errors}\n                />\n              </TabPanel>\n              <TabPanel>\n                <Form\n                  transaction={transaction}\n                  handleInputChange={handleInputChange}\n                  errors={errors}\n                />\n              </TabPanel>\n              <TabPanel>\n                <Form\n                  transaction={transaction}\n                  handleInputChange={handleInputChange}\n                  errors={errors}\n                />\n              </TabPanel>\n            </Tabs>\n            <input\n              type=\"text\"\n              className={AddTransactionStyl.input}\n              name=\"description\"\n              value={transaction.description}\n              onChange={handleInputChange}\n            />\n            {isEditTransactionOpen ? (\n              <div className={AddTransactionStyl.buttons_content}>\n                <button\n                  className={AddTransactionStyl.save_button}\n                  onClick={() => handleSave()}\n                >\n                  Save\n                </button>\n                <button\n                  className={AddTransactionStyl.delete_button}\n                  onClick={() => handleDelete()}\n                >\n                  Delete\n                </button>\n              </div>\n            ) : (\n              <div className={AddTransactionStyl.buttons_content}>\n                <button\n                  className={AddTransactionStyl.save_button}\n                  onClick={() => handleSave()}\n                >\n                  Save\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default AddTransactionModal;\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/infoModal/InfoModal.tsx",[],"/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/dailyContainer/components/dailyTableRow/DailyTableRow.tsx",["208","209"],"import React from \"react\";\nimport DailyTableRowStyle from \"./DailyTableRow.module.css\";\n\ntype Props = {\n    handleSelectEvent:(event:Props[\"event\"])=>void;\n  event: {\n      _id: string;\n      type: string;\n      date: any;\n      account?: string;\n      from?: string;\n      to?: string;\n      category?: string;\n      amount: number;\n      fees: number;\n      note: string;\n      description: string;\n  };\n};\nconst DailyTableRow: React.FC<Props> = ({ event ,handleSelectEvent}) => {\n  return (\n    <tr onClick={()=>handleSelectEvent(event)}>\n      <td >\n          <div className={DailyTableRowStyle.account_container}>\n              <div className={DailyTableRowStyle.account}>\n                  {event.type == \"transfer\" ? \"Transfer\" : event.category}\n              </div>\n              <div className={DailyTableRowStyle.category}>\n                  <div>{event.note}</div>\n                      {event.type == \"transfer\" ? (\n                          <div>\n                              {event.from}\n                              {\" ---> \"}\n                              {event.to}\n                          </div>\n                      ) : (\n                          event.account\n                      )}\n              </div>\n          </div>\n\n      </td>\n      <td className={DailyTableRowStyle.income}>\n        {event.type === \"income\" ? (event.amount / 100).toFixed(2) : null}\n      </td>\n      <td\n        className={\n          event.type === \"expense\"\n            ? DailyTableRowStyle.expense\n            : DailyTableRowStyle.transfer\n        }\n      >\n        <div>\n          {event.type === \"expense\" || event.type === \"transfer\"\n            ? (event.amount / 100).toFixed(2)\n            : null}\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nexport default DailyTableRow;\n","/home/niksan/Desktop/Projects/budget-tracker/src/desktop/modules/transaction/components/addTransactionModal/form/Form.tsx",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":14},{"ruleId":"214","severity":1,"message":"218","line":6,"column":9,"nodeType":"216","messageId":"217","endLine":6,"endColumn":19},{"ruleId":"214","severity":1,"message":"219","line":29,"column":10,"nodeType":"216","messageId":"217","endLine":29,"endColumn":22},{"ruleId":"214","severity":1,"message":"220","line":31,"column":10,"nodeType":"216","messageId":"217","endLine":31,"endColumn":19},{"ruleId":"214","severity":1,"message":"221","line":32,"column":10,"nodeType":"216","messageId":"217","endLine":32,"endColumn":20},{"ruleId":"222","severity":1,"message":"223","line":15,"column":1,"nodeType":"224","endLine":31,"endColumn":2},{"ruleId":"225","severity":1,"message":"226","line":92,"column":6,"nodeType":"227","endLine":92,"endColumn":18,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":135,"column":55,"nodeType":"231","messageId":"232","endLine":135,"endColumn":57},{"ruleId":"229","severity":1,"message":"230","line":287,"column":42,"nodeType":"231","messageId":"232","endLine":287,"endColumn":44},{"ruleId":"229","severity":1,"message":"230","line":313,"column":42,"nodeType":"231","messageId":"232","endLine":313,"endColumn":44},{"ruleId":"214","severity":1,"message":"233","line":352,"column":50,"nodeType":"216","messageId":"217","endLine":352,"endColumn":61},{"ruleId":"229","severity":1,"message":"230","line":364,"column":38,"nodeType":"231","messageId":"232","endLine":364,"endColumn":40},{"ruleId":"214","severity":1,"message":"234","line":626,"column":7,"nodeType":"216","messageId":"217","endLine":626,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":13,"column":1,"nodeType":"224","endLine":35,"endColumn":2},{"ruleId":"214","severity":1,"message":"235","line":7,"column":25,"nodeType":"216","messageId":"217","endLine":7,"endColumn":32},{"ruleId":"236","severity":1,"message":"237","line":26,"column":31,"nodeType":"238","messageId":"239","endLine":26,"endColumn":33},{"ruleId":"236","severity":1,"message":"237","line":30,"column":35,"nodeType":"238","messageId":"239","endLine":30,"endColumn":37},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"@typescript-eslint/no-unused-vars","'Moment' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'transactions' is assigned a value but never used.","'sumIncome' is assigned a value but never used.","'sumExpense' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTransactions'. Either include it or remove the dependency array.","ArrayExpression",["242"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'transaction' is assigned a value but never used.","'isTransfer' is assigned a value but never used.","'faTrash' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},"Update the dependencies array to be: [getTransactions, state.date]",{"range":"245","text":"246"},[2441,2453],"[getTransactions, state.date]"]